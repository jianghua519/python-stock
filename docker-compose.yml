version: "3.8"

services:

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: stock_data
      MYSQL_USER: stock_user
      MYSQL_PASSWORD: stock_pass
    ports:
      - "3306:3306"
    volumes:
      - ./infra/mysql:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  # Zookeeper（Kafka依赖）
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  # Kafka消息中间件
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper

  # data-ingestor 微服务（抓取股票数据）
  data-ingestor:
    build: ./services/data-ingestor
    container_name: data-ingestor
    restart: always
    volumes:
      - ./services/data-ingestor/app:/app/app
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=stock_user
      - DB_PASSWORD=stock_pass
      - DB_NAME=stock_data
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    ports:
      - "8001:8000"

  # analyzer 微服务（数据清洗、指标分析）
  analyzer:
    build: ./services/analyzer
    container_name: analyzer
    restart: always
    volumes:
      - ./services/analyzer/app:/app/app
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - mysql
      - redis
      - kafka
    ports:
      - "8002:8000"

  # model-service 微服务（AI推理）
  model-service:
    build: ./services/model-service
    container_name: model-service
    restart: always
    volumes:
      - ./services/model-service/app:/app/app
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
    depends_on:
      - mysql
      - redis
    ports:
      - "8003:8000"

  # api-gateway 微服务（统一API接口）
  api-gateway:
    build: ./services/api-gateway
    container_name: api-gateway
    restart: always
    volumes:
      - ./services/api-gateway/app:/app/app
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - MODEL_SERVICE_URL=http://model-service:8000
      - ANALYZER_SERVICE_URL=http://analyzer:8000
    depends_on:
      - mysql
      - redis
      - model-service
      - analyzer
    ports:
      - "8000:8000"

  # celery-worker（异步任务执行器）
  celery-worker:
    build: ./services/data-ingestor
    container_name: celery-worker
    command: celery -A app.tasks worker --loglevel=info
    volumes:
      - ./services/data-ingestor/app:/app/app
    environment:
      - DB_HOST=mysql
      - REDIS_HOST=redis
    depends_on:
      - redis
      - mysql

volumes:
  mysql_data:
